#!/bin/bash
#
#Program of the runit
# 
#Date:2018/01/29
#
#Globals:
#  PORT ALL_COLOR
#Arguments:
#  -c check the procfile and envfile
#  -f load the procfile 
#  -e load the envfile
#  -h help information
#Returns:
#  succ:0
#  fail:1

procfile=""
envfile=""

PORT=8080
ALL_COLOR=('31' '32' '33' '34' '35')


#####################################
#Brief:
#  usage information
#Globals:
#  None
#Agruments:
#  None
#Returns:
#  None
#####################################

usage() {
  echo "Usage: runit [-c] [-f procfile|Procfile] [-e envfile|.env]
           -c: check the procfile and envfile
           -f: load the procfile
           -e: load the envfile
           -h: help information"
}
#####################################
#Brief:
#  echo the error information
#Globals:
#  None
#Agruments:
#  errinfo
#Returns:
#  None
#####################################

err_info() {
  errinfo="$1"
  echo "${errinfo}"
}

#####################################
#Brief:
#  check the envfile
#Globals:
#  None
#Agruments:
#  envfile
#Returns:
#  succ:0
#  fail:1
#####################################

check_env() {
  local env_file="$1"
  local rets=0

  [[ ! -f "${env_file}" ]] && err_info "The envfile is not exists" && return 1
  while read line; do
      if echo "${line}" | grep -v "="; then
        err_info "no_equal_mark"
        continue
      fi
      key="${line%%=*}"
      value="${line#*=}"
      echo "${key}" | grep -q "[^a-zA-Z_]" && err_info "invalid_char" && rets=1
      echo "${value}" | grep -qE "[[:space:]]" && err_info "value_have_space" && rets=1
  done < <(grep -vE "^[[:space:]]*#" "${env_file}" | grep -v "^$")
  return ${rets}
}

#####################################
#Brief:
#  check the procfile
#Globals:
#  one
#Agruments:
#  procfile
#Returns:
#  succ:0
#  fail:1
#####################################

check_proc() {
  local proc_file="$1"
  local rets=0

  [[ ! -f "${proc_file}" ]] && err_info "The procfile  is not exists" && return 1

  while read line ; do
    if echo "${line}" | grep -v ":"; then
      err_info "no_colon_command"
      continue
    fi
      key="${line%%:*}"
      value="${line#*:}"
      echo "${key}" | grep -q [^a-zA-Z_] && err_info "invalid_char" && rets=1
  done < <(grep -vE "^[[:space:]]*#" "${proc_file}")
  return ${rets}
}
#####################################
#Brief:
#  load the envfile
#Globals:
#  None
#Agruments:
#  envfile
#Returns:
#  succ:0
#  fail:1
#####################################

load_envfile() {
  set -a
  local env_lists="$1"
  for lists in $(echo "${env_lists}"); do
    [[ -f "${lists}" ]] && source "${lists}"
  done
  return 0
}

#####################################
#Brief:
#  handle the procfile
#Globals:
#  None
#Agruments:
#  procfile
#Returns:
#  succ:0
#  fail:1
#####################################

handle_procfile() {
  local proc_file="$1"
  [[ ! -f "${proc_file}" ]] && err_info "the procfile is not exist" && return 1
  while read line; do
    if echo "${line}" | grep -qv ":"; then
      err_info "no_colon_command"
      continue
    fi
    local key="${line%%:*}"
    local value="${line#*:}"
    [[ -n "${key}" ]] && [[ -n "${value}" ]] && exec_command "${key}" "${value}"
    [[ $? -ne 0 ]] && return 1
  done < <(grep "" "${proc_file}" | grep -v "^$" | grep -vE "[[:space:]]*#" )
  wait
  return 0
}
#####################################
#Brief:
#  echo the log information
#Globals:
#  ALL_COLOR 

#Agruments:
#  names command
#Returns:
#  succ:0
#  fail:1
#####################################

log() {
  local name="$1"
  local command="$2"
  local color="$3"
  dates=$(date +%H:%M:%s)

  printf "${dates} \e[${color}m${name} %-7s "

  tput sgr0
  echo "| ${command}"
  return 0
}


#####################################
#Brief:
#  execute the command
#Globals:
#  ALL_COLOR  PORT
#Agruments:
#  names command
#Returns:
#  succ:0
#  fail:1
#####################################

exec_command() {
  local number="1"
  local names="$1"
  local command="$2"
  local pids=$!
  local colors="${ALL_COLOR[$number]}"
  local ports=$(echo "${command}" | grep -e "\$PORT")

  [[ -n "${ports}" ]] && [[ -z "${PORT}" ]] && PORT=8080
  bash -c "${command}" > >(
    while read result; do
      log "${names}" "${result}" "${COLOR}"
    done
  ) 2>&1 &

  local output="$(eval echo \"${command}\")"
  log "${names}" "${output} start with pid ${pids}" "${colors}"
  [[ $? -ne 0 ]] && return 1

  [[ -n "${ports}" ]] && PORT=$((${PORT} + 1))

  

  number=${number}+1

  return 0
}

#####################################
#Brief:
#  main procedure
#Globals:
#  procfile encfile
#Agruments:
#  None
#Returns:
#  None
#####################################

main() {
  local check=false
  while getopts "f:e:ch" flag; do
    case ${flag} in
      c) 
        check=true
        ;;
      f)
        procfile="${OPTARG}" 
        ;;
      e) 
        envfile="${OPTARG}" 
        ;;
      *) 
        usage 
        ;;
    esac
  done

  if ${check}; then
    if [[ -n "${procfile}" ]]; then
      check_proc "${procfile}"
      PROC_RET_VALUE=$?
      [[ ${PROC_RET_VALUE} -ne 0 ]] && exit 1
    else
      err_info "The procfile is null"
      exit 1
    fi

    if [[ -z "${envfile}" ]];then
      envfile="./.env"
    fi
    check_env  "${envfile}"
    ENV_RET_VALUE=$?
    [[ ${ENV_RET_VALUE} -ne 0 ]] && exit 1
  else 
    if [[ -z "${envfile}" ]]; then
      envfile="./.env"
    fi

    load_envfile "${envfile}"
    ENV_VALUE=$?
    [[ ${ENV_VALUE} -ne 0 ]] && exit 1

    if [[ -z "${procfile}" ]]; then
      procfile="./Procfile"
    fi

    handle_procfile "${procfile}"
    HANDLE_RET_VALUE=$?
    [[ HANDLE_RET_VALUE -ne 0 ]] && exit 1
  fi
  exit 0
} 

main "$@"



